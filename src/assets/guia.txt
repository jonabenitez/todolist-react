/////////////CREAR ARCHIVO VITE/////////////////////////
1) primero crear la carpeta en el cmd con vite.js
a) en el cmd: npm create vite "nombre del proyecto"
b) abrir la carpeta con VisualStudio

2) instalacion del proyecto dentro de visual estudio
a) en la terminal NPM INSTALL
b) npm run dev para iniciar
////////////////////////////////////////////////////////

/////////// SUBIR A GITHUB/////////////////////////////
1)logearnos en github
2) crear el proyecto en la pagina de git y copiar el url que nos da.
3) abrir la paleta de comendos gitclone: url
4) comentar ctrl + enter
5) pushear para que se guarde en el git.

*ATAJOS*
. rfce = me crea el componente raiz con su export
. imp = el atajo para importar, me da completo la linea solo queda completar
.clg = console.log


* /// PROYECTO ..// *

ETAPA 1 - CREACION DEL TaskList
lo que vamos a hacer es traer una TaskList desde un archivo Json.
1. para eso primero creamos el componente TaskList y lo importamos con imp al index.
2. creamos el archivo Task.js que va a funcionar como nuestra base de datos, son los datos que vamos a importar y usar en el TaskList

por ahora solo tengo esto, para hacer la lista de tareas necesito datos, vamos a crear datos dentro de la app en un js.
*SE LLAMAN .JSX CUANDO VAMOS A USARLO EN FORMA DE INTERFAZ.*

ETAPA 2  CREACION DE  TASKFORM - USUARIO CREA UNA TAREA DENTRO DEL TaskList
1. primero creamos un componente llamado TaskForm, donde vamos a crear un imput para que el asuario cree su tarea.
2. lo que estoy buscando es que cuando el usuario escriba algo, eso se guarde por ahora en consola, eso lo hacemos con el evento onChange
3. una vez que logramos capturar lo que queremos, vamos a guardarlos en un estado UseState y lograr que se guarde en un estado.
4. una vez logrado guardar los datos en un estado lo que voy a hacer es que cuando se ejecute el formulario, se lea el valor que se ingresa, el title.
eso lo hacemos con onSubmit y ejecutar una funcion.
** esto lo  que hace es guardar lo que ingresa en el input en consola, pero el problema que tenemos es que los formularios no son async, sino que reinician el navegador, para esto usamos el prevent 

** arbol de componentes**
por ahora nuestra pagina esta formada por un componente que contiene 2 mas dentro del mismo,

app{
    --> TaskForm
    --> TaskList -----> {(Arreglo de tareas Task [] solo disponible para tasksList)}
}

ni app, TaskForm tienen acceso al arreglo dentro de TaskList.

para que ambos tengan acceso tengo que cambiar de lugar, subir un nivel al arreglo, que este dentro del nivel mas alto que es app:

app{
    --> ArreglodeTareas [tasks]
                              |--> TaskForm
                              |--> TaskList
}

y de esta forma poder pasar el array tanto a TaskForm como a TaskList para poder acceder al arreglo.

vamos a cortar y pegar el estado donde se creo el array Tasks y su UseEffect donde se asigno el valor de este array, llevamos el Import del Tasks as Data, y del UseEffect tambien para que funcione.

AHORA YA SI!
ya tenemos este array en el app, ahora tengo que pasarlos al TaskListy al TaskForm, esto en los Componentes lo hago por medio de "los Props".

1) DENTRO DE APP, LE INDICO QUE COMPONENTES VANA  RECIBIR DE APP.

  return (
  <>
    <TaskForm/>
    <TaskList **tasks={tasks}**/>
  </>

2) voy al componente que quiero que reciba los props, en los parametros agregro: function TaskList (props ) {
 //y le digo que desde props va a recibir Tasks
 props.Tasks.map {(Tasks)}
}

MEJOR FORMA: USAR FORMA ESTRUCTURADA.

function ({tasks}) = esto sabe que se estan buscando los props y especificamos cual. ya directamente lo va a reconcer    

TODO ESTO ES PARA QUE ESTE EL ARREGLO DENTRO DE APP Y PODER PASARLOS A LOS DEMAS COMPONENTES.

FALTA 1 PASO: 
React funciona por medio de funciones, es necesario crear una funcion 

a) creamos createTask{} dentro de app
este lo unico que va a hacer es recibir nuevas tareas, task, que es un objeto, y este objeto lo va anadir dentro del arreglo junto con las demas tareas.

va a copiar todos los datos que ya tiene tasks, le va a agregar esta nueva tarea y va a crear un nuevo array.
  
//**imporante: como se crea un nuevo arreglo, es necesario que se asigne este nuevo al estado, hacemos un setTasks[...tasks, task] */

para eso hay que asignarle al estado este nuevo array

function createTask (task) {
 setTasks ([...tasks, task ])


b) DENTRO DE LOS COMPONENTES DE APP - TASKFORM
le vamos a asignar esta nueva funcion al componente

c) dentro de TaskForm le pasamos en los parametros esta funcion 
function TaskForm(createTask) {}

d) cambio el console.log() por una nueva variable llamada newTask.
esta va a tener lo que el usuario ingrese, un title en este caso. pero en formato de objeto para poder anadirlo al tasks.

e) ANADIR LA TAREA A LA LISTA.
en lugar de consologuear este objeto newTask, se lo damos como valor al createTask

createTask (newTask)

esto viaja al componente app, entra al createTask {settasks[...tasks, task]}

crea el nuevo array, el cual se encuentra conectado por medio de los props, y este nuevo array guarda los taks que teniamos, con la nueva tarea que acabamos de agregar

**IMPORTANTE** = LA CONSOLA ME TIRA UN ERROR, por que cada elemento debe contener una key unica, y de esta forma, si guardamos en el TaskForm

        const newTask = {
            title,
            id:4, 
            descripcion:'nueva tarea'

        }
        siempre va a tener el ID 4.

COMO SOLUCIONARLO??

VAMOS A PONER EL LARGO DEL ARRAY COMO ID, UN .LENGH
PERO PARA ESO DEBEMOS TENER ACCESO AL ARRAY, Y NO TENEMOS ACCESO PORQUE EL ARRAY ESTA EN APP, LO UNICO QUE HACEMOS ES CREAR UNA COPIA.

ENTONCES PARA ESO, MOVEMOS EL LUGAR DONDE SE CREA LA TAREA, EN EL TaskForm VAMOS A MANTENER CREANDO EL TITULO, ESE SIEMPRE VA A SER DISTINTO Y NO VA A HABER PROBLEMA Y VA A QUEDAR

newTask (title)
esto va a viajar a tasks de app y va a crear el TITULO

FALTA CREAR EL ID Y LA DESCRIPCION, QUE LA VAMOS A CREAR EN APP


////// SEPARAR COMPONENTES EN SUBCOMPONENTES///////

esto se utiliza para organizar mejor el codigo, separando las porciones de interfaz como pasa en el tasklist.
separamos la porcion de interfaz y creamos un nuevo componente que se va a llamar taskCard. donde al crealo lo que me permite es que este pueda ser reutilizado.

//TASKCARD///
   <div>
    <h1>{task.title}</h1>
    <p>{task.description}</p>
  </div> )

cortando esta parte de interfaz, lo que nos permite es utilizarlo y reutilizarlo, este componente lo vamos a usar en TaskList, importandolo.
 
 Y EN EL TASKLIST:
 
 function TaskList({tasks}) {
    if (tasks.length === 0) {
      return <h1>no hay tareas aun</h1>} 
    
    return (
      <div>
        {
          tasks.map((task) => (
*******************************************
           <TaskCard
            key={task.id}
            task={task}
*******************************************

            />
        ))}
      </div>)}

ESTE TASKCARD: SI VAMOS AL COMPONENTE, VEMOS QUE ESTA CONFORMADO POR UNA TAREA Y UNA DESCRIPCION, LAS NECESITA.
YO SE QUE LAS TAREAS TIENEN UN TITULO Y UNA DESCRIPCION, ENTONCES SE LAS VOY A PASAR POR MEDIO DE ESTAS TAREAS:

Como se las paso? POR MEDIO DE LAS PROPS EN TASKCARD.
en el TaskCard, le pasamos como propiedades las tareas, donde va a recibir el titulo de la tarea y la descripcion.

en resumen:
en TaskList:
por cada vez que se recorra el arreglo de tarea,va a generar un componente TaskCard y le va a asignar una tarea y un Id de esta tarea, la que se esta recorriendo en ese momento y esta va a ser tomada por el TaskCard por medio de las propiedades y va a tomar lo que le importa a taskCard, el titulo y la descripcion

MODIFICAR LA DESCRIPCION - QUE NO SIEMPRE SEA LA MISMA
 Dentro de TaskForm:
1)se hace aqui dentro porque es donde se crean las tareas tambien,
primero creo la interfaz(textArea) que va a contener el dato que queremos capturar.
2) este dato, como todo dato que cambia, lo guardamos en un useEffect llamado descripcion.
3) una vez que tenemos el dato guardado en un estado, necesitamos que este sea captado por el encargo de recogerlos datos y llevarlo a data, el createTask. para esto hay que mejorarlo, ya que por el momento espera solo un string.

4) MEJORANDO createTask:
ahora vamos a decirle que no solo va a esperar un string, sino una tarea completa, un objeto.

EN APP:
DESDE ESTO....
  function  createTask (taskTitle) {
    settasks ([...tasks, {
      title:taskTitle,
      id:tasks.length,
      description: "tarea nueva" 
    }])

PASA A ESTO....
  function  createTask (task) {
    settasks ([...tasks, {
      title:task.title,
      id:tasks.length,
      description: task.description
    }])
____________________________________________
  Y EN TASKFORM
  DESDE ESTO....
  
function TaskForm({ createTask }) {

    let handdleSubmit = (e) => {
        e.preventDefault()
      
        createTask(newTask)
         }

PASA A ESTO...
     let handdleSubmit = (e) => {
        e.preventDefault()
        createTask(
          {
        title,
        descripcion,}
        )
        }

.. PARA QUE EL FORMULARIO SE LIMPIE CUANDO ANADIMOS LAS TAREAS
dentro del TaskForm
una vez que en el input este completo por el usuario, CUANDO HAGA CLICK EN SUBMIT (BOTON), ESTO ES MUY SENSILLO,
SOLAMENTE TENGO QUE VOLVER EL ESTADO A UN STRING vacio.

    setTitle("")
    setDescription("")

esto dejandolo asi solamente limpia el estado pero no se refleja en el input, para eso es necesario que:
EL VALOR DEL ESTADO SEA IGUAL AL INPUT QUE ESTAMOS TRABANDO.

VALUE={title}
VALUE={descripcion}

y ahora se va a reflejar de forma actual el valor del estado en el input

ELIMINAR TAREA

para eliminar una tarea, necesitamos usar el arbol de componentes, similar al createTask.

donde se va a crear la funcion es en el componente padre que es app, para luego ser pasado a tasklist y por ultimo al elemento que lo va a a ejecutar que es el taskCard.
por medio de las prop vamos a pasar lo que creamos en app.

app --> tasksList --> taskCard
deletetask->deletetask->deletetask

una vez creada la funcion de eliminar tarea, primero creamos la funcion a modo de prueba con un console.log(taks), para corroborar que me traiga los datos con los que quiero trabajar.

function deleteTask() {
  console.log(tasks) 
}
esto me trae el array con las tareas hasta el momento.

UNA VEZ QUE TENGO LAS TAREAS COMO LAS ELIMINO?  USANDO EL METODO DE ARRAY: FILTER

lo que va a hacer filter, es comparar el valor que le estoy pasando con los valores que tengo en el array, cada elemento del array tiene un ID unico, esto es con lo que voy a trabajar.
voy a comparar si el ID que entra en la funcion eventCLick  como parametro es distinto a los que tengo en el array de tareas, si este es distinto lo deja, si encuentra uno que es igual, lo va a eliminar.

function deleteTask(taskID) {
  console.log(taskID)
}
**IMPORANTE**
la funcion entiende que estoy trabajando con el ID que es el Index, siempre el primer parametro la function es el index, asi lo puedo identificar

Y EN EL TRASKCARD

<button onClick={ ()=> deleteTask(task.id)}>
      Eliminar tarea
    </button>
  </> 

esta primer funcion ()=>  es una funcion anonima, sirve, para que no se ejecute directamente el deleteTask, se pone como paso previo, asi se ejecuta "vacia" y cuando se hace un click se pasa al deleteTask y se ejecuta

AHORA QUE YA CAPTURE EL DATO QUE QUIERO ELIMINAR, EL ID. CREO EL FILTRO PARA QUITARLO EN APP

function deleteTask(taskID) {
tasks.filter(task => task.id !== taskID)

ESTE FILTRO COMPARA EL INDEX O ID QUE ENTRA EN LA FUNCTION deleteTask EN TASKCARD AL HACERLE CLICK AL ELEMENTO Y SUPONIENDO QUE ENTRE 1, VA A RECORRER EL ARRAY DONDE ESTAN TODAS LAS TAREAS Y COMPARARA 1X1 EL ID DE CARA TAREA, HASTA ENCONTRAR EL QUE ES IGUAL, EL QUE ES IGUAL A 1 LO ELIMINA.

ULTIMO PASO!
ESTO LO QUE HACE ES CREAR UN NUEVO ARRAY SIN ESTE ELEMENTO 1 = [0,2,3,4]
PARA QUE SE REFLEJE SOLAMENTE FALTA,QUE TODO ESTO, ENTRE SETEANDO EL ESTADO DONDE SE ENCUENTRA.


function deleteTask(taskID) {

setTasks(tasks.filter(task => task.id !== taskID))


-------------- LA VEDERA INTERFAZ = CREANDO  EL CONTEXTO DE LA APP ------------------------

hasta ahora funciona la aplicacion, pero se nos complica mantenerla asi por la forma que tenemos de interactuar con el arbol,
donde el ultimo componente es el taskCard pero el para acceder a algun dato. lo hacen por medio del createTask o el deleteTask

app        -->   tasksList  -->    taskCard
createTask -->   createTask -->   createTask
deleteTask -->   deleteTask -->   deleteTask

este es el viaje que hace la info, tiene que pasar por todas las interfacez y eso no es practico si hay 100 componentes hay que pasarlo 100 veces y modificando una se va a ir modificando las de abajo y por ahi no queremos crear eso.

esto se debe a que APP es el dueno del estado donde estan tomando los datos del array con las tareas, las tacks.



// ESTADO //
el estado es un estado que se va actualizando, es lo que creamos en app, es todo desde el estado en si, hasta el create y deletetask.
 
  const [tasks, settasks] = useState([]) --> esta es el estado en si
  useEffect (()=>{settasks(data)},[])

  function  createTask (task)
    settasks ([...tasks, {
      title:task.title,
      id:tasks.length,
      description:task.description,}])}

function deleteTask(taskID) {
  settasks(tasks.filter(task => task.id !== taskID))}



/// EL CONTEXTO ///
es lo que vendria a solucionar esto, un contexto que nos permita acceder directamente a los valores sin que actuen los demas como intermediarios.
que los componentes se lo pidan a su componente mayor y no alrevez.


CONTEXTO   <-- app    <--   tasksList  <--    taskCard
 ESTADO

ahora contexto va almacenar el estado, cual es la diferencia?

React penso en eso y creo el API CONTEXT y nos trae una nueva forma de traer datos, permitiendonos acceder directamente al contexto.
 como todos estan dentro de este contexto, ahora todos pueden acceder a los datos y compartilo con todos los componentes.


// PASOS para hacerlo.

1) creamos una carpeta context
2) dentro vamos a crear una variable que contenga la creacion del taskcontext: taskcontext = createContext () = TaskContext ES EL NOMBRE DEL CONTEXTO

3)  y  creamos la funcion que es la que va a crear este contexto, TaskContextProvider.

TaskContextProvider:
   function TaskContextProvider(props) {
    return (
        <TaskContext.Provider> 
              {props.children}
        </TaskContext.Provider> )}

  la funcion de este contexto es poner a todos al mismo nivel y puedan intecambiar todos sus datos, en el contexto va a estar guardando todo y cada componete va  a poder pedirlo directamente.
{props.children} ES LO QUE INDICA QUE TODO LO Q VA A ESTAR DENTRO, VAN A SER SU HIJOS.

ahora dentro del taskcontext, vamos a agregar lo que estaba en app y para que los demas componentes tengan acceso a los datos que van a estar en taskcontext, se lo tengo que agregar como valor o propiedad a este TaskContextProvider 

 <TaskContext.Provider
            value={{
                tasks,
                createTask,
                deleteTask
            }}>

muevo los import de app a taskcontext para que tanto los tasks cmo createTask y deleteTask funcionen
y en app, borro esto que se los estaba pasando como propiedades

    <TaskForm createTask= {createTask} />
    <TaskList tasks={tasks} deleteTask={deleteTask}/>
  </>

  quedando asi
      <TaskForm/>
    <TaskList/>
  </>

  y dentro de estas carpetas voy a agregar el contexto y el use context para agregarselos ahora dentro del componente y de esta nueva forma


DENTRO DE CADA COMPONENTE
1) BORRO LA PROP QUE LE HABIAMOS PASADO Y YA NO NOS sirve
2) 
A) IMPORTO DESDE REACT EL USECONTEXT, es el que me permite usar el contexto.
B) IMPORTO DESDE LA CARPETA context/TaskContext EL NOMBRE DEL CONTEXTO QUE VOY A USAR, taskcontext.
3) CREO UNA VARIABLE DONDE VOY A TRAER DESDE EL VALOR DE ESTE TASK CONTEXT.

const value = useContext (taskcontext)
traduccion:
voy a usar el contexto taskcontext

CON ESTO ME TRAIGO TODO EL ARREGLO TASKS, CREATETASK, DELETETASK.

AHORA SELECCIONO QUE NECESITO TRAER
const {CREATETASK} = useContext (taskcontext)

y ahora me estoy trayendo el createTask.

CREAR ESTILO A NUESTRA APP WILD CSS

primero instalamos el componentente desde su pag.

ESTO SON ESTILOS INLINE, POR LO TANTO PRIMERO VAMOS  A COLOREAR PARA DIFERENCIAR CADA COMPONENTE

para ordenar:
TASKLIST: 
1) es necesario crear un grid en el elemento que contiene todas las tarjetas, en este caso el DIV de TaskList
      <div className="grid grid-cols-4" >
le estamos poniendo un grid con 4 columnas

2) agregamos un espacio entre las tarjetas con un gap.
      <div className="grid grid-cols-4 gap-4" >

3) como me queda muy pegado a los lados, voy a agregar un espacio, por lo tanto:
en APP: ya que el contiene a todo, vamos a agregarle al fragment un main, donde le vamos a dar un color a toda la pantalla con className='bg-zinc-900 h-screen.

y para centrar creamos un div llamado container y le pasamos la sig propiedad:
  <div className='container   '>
 esto significa que se va a centrar respecto a los lados de manera automatica y le agrego un padding para que no este pegado hacia arriba

 PARA CENTRAR EL FORMULARIO.

 en TASKFORM: CREO UN DIV CONTENEDOR DE TODO
 a este le pongo un width max automatico para centrarlo.

 y a los input



 